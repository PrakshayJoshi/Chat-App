{"ast":null,"code":"var _jsxFileName = \"/Users/prakshayjoshi/Documents/Projects/Chat-App/Frontend/my-app/src/components/SearchPlaceComponent.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport '../styles/SearchPlaceComponent.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SearchPlaceComponent = ({\n  setDestination\n}) => {\n  _s();\n  const [autocomplete, setAutocomplete] = useState(null);\n  const inputRef = useRef(null);\n  const mapRef = useRef(null);\n  const markerRef = useRef(null);\n  const polygonRef = useRef(null);\n  useEffect(() => {\n    if (window.google && window.google.maps) {\n      const map = new window.google.maps.Map(mapRef.current, {\n        center: {\n          lat: 37.7749,\n          lng: -122.4194\n        },\n        zoom: 10\n      });\n      const options = {\n        fields: ['address_components', 'geometry', 'icon', 'name']\n      };\n      const autoCompleteInstance = new window.google.maps.places.Autocomplete(inputRef.current, options);\n      autoCompleteInstance.bindTo('bounds', map);\n      autoCompleteInstance.addListener('place_changed', () => {\n        const place = autoCompleteInstance.getPlace();\n        if (!place.geometry || !place.geometry.location) {\n          console.log('No details available for input: \\'' + place.name + '\\'');\n          return;\n        }\n        if (markerRef.current) {\n          markerRef.current.setMap(null);\n        }\n        markerRef.current = new window.google.maps.Marker({\n          map: map,\n          position: place.geometry.location\n        });\n        map.setCenter(place.geometry.location);\n        map.setZoom(15);\n        if (polygonRef.current) {\n          polygonRef.current.setMap(null);\n        }\n        const bounds = new window.google.maps.LatLngBounds();\n        place.geometry.viewport.forEach(latLng => bounds.extend(latLng));\n        const northeast = bounds.getNorthEast();\n        const southwest = bounds.getSouthWest();\n        const polygonPath = [{\n          lat: northeast.lat(),\n          lng: southwest.lng()\n        }, {\n          lat: northeast.lat(),\n          lng: northeast.lng()\n        }, {\n          lat: southwest.lat(),\n          lng: northeast.lng()\n        }, {\n          lat: southwest.lat(),\n          lng: southwest.lng()\n        }];\n        polygonRef.current = new window.google.maps.Polygon({\n          map: map,\n          paths: polygonPath,\n          strokeColor: '#FF0000',\n          strokeOpacity: 0.8,\n          strokeWeight: 2,\n          fillColor: '#FF0000',\n          fillOpacity: 0.35\n        });\n        setDestination({\n          latitude: place.geometry.location.lat(),\n          longitude: place.geometry.location.lng(),\n          boundary: {\n            northeast: {\n              lat: northeast.lat(),\n              lng: northeast.lng()\n            },\n            southwest: {\n              lat: southwest.lat(),\n              lng: southwest.lng()\n            }\n          }\n        });\n      });\n      setAutocomplete(autoCompleteInstance);\n    }\n  }, [setDestination]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search-place\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      ref: inputRef,\n      type: \"text\",\n      placeholder: \"Search for a place\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapRef,\n      className: \"map\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n_s(SearchPlaceComponent, \"yPgPs9/73z2s0wZHWl9qaH68SyQ=\");\n_c = SearchPlaceComponent;\nexport default SearchPlaceComponent;\nvar _c;\n$RefreshReg$(_c, \"SearchPlaceComponent\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","SearchPlaceComponent","setDestination","_s","autocomplete","setAutocomplete","inputRef","mapRef","markerRef","polygonRef","window","google","maps","map","Map","current","center","lat","lng","zoom","options","fields","autoCompleteInstance","places","Autocomplete","bindTo","addListener","place","getPlace","geometry","location","console","log","name","setMap","Marker","position","setCenter","setZoom","bounds","LatLngBounds","viewport","forEach","latLng","extend","northeast","getNorthEast","southwest","getSouthWest","polygonPath","Polygon","paths","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","latitude","longitude","boundary","className","children","ref","type","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/prakshayjoshi/Documents/Projects/Chat-App/Frontend/my-app/src/components/SearchPlaceComponent.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport '../styles/SearchPlaceComponent.css';\n\nconst SearchPlaceComponent = ({ setDestination }) => {\n  const [autocomplete, setAutocomplete] = useState(null);\n  const inputRef = useRef(null);\n  const mapRef = useRef(null);\n  const markerRef = useRef(null);\n  const polygonRef = useRef(null);\n\n  useEffect(() => {\n    if (window.google && window.google.maps) {\n      const map = new window.google.maps.Map(mapRef.current, {\n        center: { lat: 37.7749, lng: -122.4194 },\n        zoom: 10,\n      });\n\n      const options = {\n        fields: ['address_components', 'geometry', 'icon', 'name'],\n      };\n      const autoCompleteInstance = new window.google.maps.places.Autocomplete(inputRef.current, options);\n      autoCompleteInstance.bindTo('bounds', map);\n\n      autoCompleteInstance.addListener('place_changed', () => {\n        const place = autoCompleteInstance.getPlace();\n        if (!place.geometry || !place.geometry.location) {\n          console.log('No details available for input: \\'' + place.name + '\\'');\n          return;\n        }\n\n        if (markerRef.current) {\n          markerRef.current.setMap(null);\n        }\n        markerRef.current = new window.google.maps.Marker({\n          map: map,\n          position: place.geometry.location,\n        });\n\n        map.setCenter(place.geometry.location);\n        map.setZoom(15);\n\n        if (polygonRef.current) {\n          polygonRef.current.setMap(null);\n        }\n\n        const bounds = new window.google.maps.LatLngBounds();\n        place.geometry.viewport.forEach((latLng) => bounds.extend(latLng));\n\n        const northeast = bounds.getNorthEast();\n        const southwest = bounds.getSouthWest();\n\n        const polygonPath = [\n          { lat: northeast.lat(), lng: southwest.lng() },\n          { lat: northeast.lat(), lng: northeast.lng() },\n          { lat: southwest.lat(), lng: northeast.lng() },\n          { lat: southwest.lat(), lng: southwest.lng() },\n        ];\n\n        polygonRef.current = new window.google.maps.Polygon({\n          map: map,\n          paths: polygonPath,\n          strokeColor: '#FF0000',\n          strokeOpacity: 0.8,\n          strokeWeight: 2,\n          fillColor: '#FF0000',\n          fillOpacity: 0.35,\n        });\n\n        setDestination({\n          latitude: place.geometry.location.lat(),\n          longitude: place.geometry.location.lng(),\n          boundary: {\n            northeast: { lat: northeast.lat(), lng: northeast.lng() },\n            southwest: { lat: southwest.lat(), lng: southwest.lng() },\n          }\n        });\n      });\n\n      setAutocomplete(autoCompleteInstance);\n    }\n  }, [setDestination]);\n\n  return (\n    <div className=\"search-place\">\n      <input ref={inputRef} type=\"text\" placeholder=\"Search for a place\" />\n      <div ref={mapRef} className=\"map\"></div>\n    </div>\n  );\n};\n\nexport default SearchPlaceComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}