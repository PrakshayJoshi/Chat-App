{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nconst LocationUpdater = () => {\n  _s();\n  useEffect(() => {\n    const userId = localStorage.getItem('userId');\n    if (!userId) {\n      console.error('No user ID found in localStorage');\n      return;\n    }\n    const updateLocation = async (latitude, longitude) => {\n      try {\n        const response = await fetch(`http://localhost:9000/api/users/${userId}/location`, {\n          method: 'PATCH',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            latitude,\n            longitude\n          })\n        });\n        if (response.ok) {\n          console.log('Updated Location');\n        } else {\n          console.error('Failed to update location');\n        }\n      } catch (error) {\n        console.error('Error updating location:', error);\n      }\n    };\n    const checkLocation = () => {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(position => {\n          const {\n            latitude,\n            longitude\n          } = position.coords;\n          updateLocation(latitude, longitude);\n        }, error => {\n          console.error('Error getting location:', error);\n        });\n      }\n    };\n    checkLocation(); // Check location immediately when the component mounts\n\n    const intervalId = setInterval(checkLocation, 30000); // Check location every 30 seconds\n\n    return () => clearInterval(intervalId); // Cleanup on component unmount\n  }, []);\n  return null;\n};\n_s(LocationUpdater, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = LocationUpdater;\nexport default LocationUpdater;\nvar _c;\n$RefreshReg$(_c, \"LocationUpdater\");","map":{"version":3,"names":["React","useEffect","LocationUpdater","_s","userId","localStorage","getItem","console","error","updateLocation","latitude","longitude","response","fetch","method","headers","body","JSON","stringify","ok","log","checkLocation","navigator","geolocation","getCurrentPosition","position","coords","intervalId","setInterval","clearInterval","_c","$RefreshReg$"],"sources":["/Users/prakshayjoshi/Documents/Projects/Chat-App/Frontend/my-app/src/components/LocationUpdater.jsx"],"sourcesContent":["import React, { useEffect } from 'react';\n\nconst LocationUpdater = () => {\n  useEffect(() => {\n    const userId = localStorage.getItem('userId');\n\n    if (!userId) {\n      console.error('No user ID found in localStorage');\n      return;\n    }\n\n    const updateLocation = async (latitude, longitude) => {\n      try {\n        const response = await fetch(`http://localhost:9000/api/users/${userId}/location`, {\n          method: 'PATCH',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ latitude, longitude }),\n        });\n\n        if (response.ok) {\n          console.log('Updated Location');\n        } else {\n          console.error('Failed to update location');\n        }\n      } catch (error) {\n        console.error('Error updating location:', error);\n      }\n    };\n\n    const checkLocation = () => {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition((position) => {\n          const { latitude, longitude } = position.coords;\n          updateLocation(latitude, longitude);\n        }, (error) => {\n          console.error('Error getting location:', error);\n        });\n      }\n    };\n\n    checkLocation(); // Check location immediately when the component mounts\n\n    const intervalId = setInterval(checkLocation, 30000); // Check location every 30 seconds\n\n    return () => clearInterval(intervalId); // Cleanup on component unmount\n  }, []);\n\n  return null;\n};\n\nexport default LocationUpdater;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AAExC,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5BF,SAAS,CAAC,MAAM;IACd,MAAMG,MAAM,GAAGC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;IAE7C,IAAI,CAACF,MAAM,EAAE;MACXG,OAAO,CAACC,KAAK,CAAC,kCAAkC,CAAC;MACjD;IACF;IAEA,MAAMC,cAAc,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,SAAS,KAAK;MACpD,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,mCAAkCT,MAAO,WAAU,EAAE;UACjFU,MAAM,EAAE,OAAO;UACfC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAER,QAAQ;YAAEC;UAAU,CAAC;QAC9C,CAAC,CAAC;QAEF,IAAIC,QAAQ,CAACO,EAAE,EAAE;UACfZ,OAAO,CAACa,GAAG,CAAC,kBAAkB,CAAC;QACjC,CAAC,MAAM;UACLb,OAAO,CAACC,KAAK,CAAC,2BAA2B,CAAC;QAC5C;MACF,CAAC,CAAC,OAAOA,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAClD;IACF,CAAC;IAED,MAAMa,aAAa,GAAGA,CAAA,KAAM;MAC1B,IAAIC,SAAS,CAACC,WAAW,EAAE;QACzBD,SAAS,CAACC,WAAW,CAACC,kBAAkB,CAAEC,QAAQ,IAAK;UACrD,MAAM;YAAEf,QAAQ;YAAEC;UAAU,CAAC,GAAGc,QAAQ,CAACC,MAAM;UAC/CjB,cAAc,CAACC,QAAQ,EAAEC,SAAS,CAAC;QACrC,CAAC,EAAGH,KAAK,IAAK;UACZD,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;QACjD,CAAC,CAAC;MACJ;IACF,CAAC;IAEDa,aAAa,CAAC,CAAC,CAAC,CAAC;;IAEjB,MAAMM,UAAU,GAAGC,WAAW,CAACP,aAAa,EAAE,KAAK,CAAC,CAAC,CAAC;;IAEtD,OAAO,MAAMQ,aAAa,CAACF,UAAU,CAAC,CAAC,CAAC;EAC1C,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO,IAAI;AACb,CAAC;AAACxB,EAAA,CAhDID,eAAe;AAAA4B,EAAA,GAAf5B,eAAe;AAkDrB,eAAeA,eAAe;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}