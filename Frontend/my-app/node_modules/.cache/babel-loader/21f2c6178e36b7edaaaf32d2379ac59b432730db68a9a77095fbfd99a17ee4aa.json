{"ast":null,"code":"var _jsxFileName = \"/Users/prakshayjoshi/Documents/Projects/Chat-App/Frontend/my-app/src/components/SearchPlaceComponent.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport '../styles/SearchPlaceComponent.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SearchPlaceComponent = ({\n  setDestination\n}) => {\n  _s();\n  const searchBoxRef = useRef(null);\n  const [map, setMap] = useState(null);\n  useEffect(() => {\n    if (!searchBoxRef.current) return;\n    const initializeAutocomplete = () => {\n      const autocomplete = new window.google.maps.places.Autocomplete(searchBoxRef.current);\n      autocomplete.addListener('place_changed', () => {\n        const place = autocomplete.getPlace();\n        if (place.geometry) {\n          const location = {\n            latitude: place.geometry.location.lat(),\n            longitude: place.geometry.location.lng()\n          };\n          setDestination(location);\n\n          // Create a map centered at the selected place\n          const mapOptions = {\n            center: place.geometry.location,\n            zoom: 15\n          };\n          const newMap = new window.google.maps.Map(document.getElementById('map'), mapOptions);\n          setMap(newMap);\n\n          // Fetch the place details and create a polygon\n          createPlacePolygon(newMap, place);\n        }\n      });\n    };\n    if (window.google && window.google.maps && window.google.maps.places) {\n      initializeAutocomplete();\n    }\n  }, [setDestination]);\n  const createPlacePolygon = (map, place) => {\n    const service = new window.google.maps.places.PlacesService(map);\n    service.getDetails({\n      placeId: place.place_id\n    }, (details, status) => {\n      if (status === window.google.maps.places.PlacesServiceStatus.OK) {\n        const bounds = new window.google.maps.LatLngBounds();\n        const coordinates = [];\n        if (details.geometry.viewport) {\n          details.geometry.viewport.forEachLatLng(latlng => {\n            bounds.extend(latlng);\n            coordinates.push({\n              lat: latlng.lat(),\n              lng: latlng.lng()\n            });\n          });\n        } else {\n          bounds.extend(details.geometry.location);\n        }\n        const polygon = new window.google.maps.Polygon({\n          paths: coordinates,\n          strokeColor: '#FF0000',\n          strokeOpacity: 0.8,\n          strokeWeight: 2,\n          fillColor: '#FF0000',\n          fillOpacity: 0.35\n        });\n        polygon.setMap(map);\n        map.fitBounds(bounds);\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"search-place-input\",\n      type: \"text\",\n      placeholder: \"Search for a place\",\n      ref: searchBoxRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\",\n      style: {\n        height: '500px',\n        width: '100%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n_s(SearchPlaceComponent, \"UqmtvwLFN1UPx8TmAZE/ZaDKJXc=\");\n_c = SearchPlaceComponent;\nexport default SearchPlaceComponent;\nvar _c;\n$RefreshReg$(_c, \"SearchPlaceComponent\");","map":{"version":3,"names":["React","useRef","useEffect","useState","jsxDEV","_jsxDEV","SearchPlaceComponent","setDestination","_s","searchBoxRef","map","setMap","current","initializeAutocomplete","autocomplete","window","google","maps","places","Autocomplete","addListener","place","getPlace","geometry","location","latitude","lat","longitude","lng","mapOptions","center","zoom","newMap","Map","document","getElementById","createPlacePolygon","service","PlacesService","getDetails","placeId","place_id","details","status","PlacesServiceStatus","OK","bounds","LatLngBounds","coordinates","viewport","forEachLatLng","latlng","extend","push","polygon","Polygon","paths","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","fitBounds","children","className","type","placeholder","ref","fileName","_jsxFileName","lineNumber","columnNumber","id","style","height","width","_c","$RefreshReg$"],"sources":["/Users/prakshayjoshi/Documents/Projects/Chat-App/Frontend/my-app/src/components/SearchPlaceComponent.jsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport '../styles/SearchPlaceComponent.css';\n\nconst SearchPlaceComponent = ({ setDestination }) => {\n  const searchBoxRef = useRef(null);\n  const [map, setMap] = useState(null);\n\n  useEffect(() => {\n    if (!searchBoxRef.current) return;\n\n    const initializeAutocomplete = () => {\n      const autocomplete = new window.google.maps.places.Autocomplete(searchBoxRef.current);\n      autocomplete.addListener('place_changed', () => {\n        const place = autocomplete.getPlace();\n        if (place.geometry) {\n          const location = {\n            latitude: place.geometry.location.lat(),\n            longitude: place.geometry.location.lng()\n          };\n          setDestination(location);\n\n          // Create a map centered at the selected place\n          const mapOptions = {\n            center: place.geometry.location,\n            zoom: 15,\n          };\n          const newMap = new window.google.maps.Map(document.getElementById('map'), mapOptions);\n          setMap(newMap);\n\n          // Fetch the place details and create a polygon\n          createPlacePolygon(newMap, place);\n        }\n      });\n    };\n\n    if (window.google && window.google.maps && window.google.maps.places) {\n      initializeAutocomplete();\n    }\n  }, [setDestination]);\n\n  const createPlacePolygon = (map, place) => {\n    const service = new window.google.maps.places.PlacesService(map);\n\n    service.getDetails({ placeId: place.place_id }, (details, status) => {\n      if (status === window.google.maps.places.PlacesServiceStatus.OK) {\n        const bounds = new window.google.maps.LatLngBounds();\n        const coordinates = [];\n        \n        if (details.geometry.viewport) {\n          details.geometry.viewport.forEachLatLng(latlng => {\n            bounds.extend(latlng);\n            coordinates.push({ lat: latlng.lat(), lng: latlng.lng() });\n          });\n        } else {\n          bounds.extend(details.geometry.location);\n        }\n\n        const polygon = new window.google.maps.Polygon({\n          paths: coordinates,\n          strokeColor: '#FF0000',\n          strokeOpacity: 0.8,\n          strokeWeight: 2,\n          fillColor: '#FF0000',\n          fillOpacity: 0.35\n        });\n        polygon.setMap(map);\n        map.fitBounds(bounds);\n      }\n    });\n  };\n\n  return (\n    <div>\n      <input\n        className=\"search-place-input\"\n        type=\"text\"\n        placeholder=\"Search for a place\"\n        ref={searchBoxRef}\n      />\n      <div id=\"map\" style={{ height: '500px', width: '100%' }}></div>\n    </div>\n  );\n};\n\nexport default SearchPlaceComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}