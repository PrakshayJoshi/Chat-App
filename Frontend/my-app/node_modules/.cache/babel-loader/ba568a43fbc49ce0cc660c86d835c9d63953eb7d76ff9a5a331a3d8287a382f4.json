{"ast":null,"code":"var _s = $RefreshSig$();\n// src/components/LocationUpdater.jsx\nimport { useEffect } from 'react';\nimport { useUser } from '../contexts/UserContext';\nconst LocationUpdater = () => {\n  _s();\n  const {\n    user\n  } = useUser();\n  useEffect(() => {\n    const userId = localStorage.getItem('userId');\n    if (!userId) {\n      console.error('No user ID found in localStorage');\n      return;\n    }\n    const updateLocation = async (latitude, longitude) => {\n      try {\n        const response = await fetch(`http://localhost:9000/api/users/${userId}/location`, {\n          method: 'PATCH',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            latitude,\n            longitude\n          })\n        });\n        if (response.ok) {\n          console.log('Location updated');\n        } else {\n          console.error('Failed to update location');\n        }\n      } catch (error) {\n        console.error('Error updating location:', error);\n      }\n    };\n    const checkLocation = () => {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(position => {\n          const {\n            latitude,\n            longitude\n          } = position.coords;\n          updateLocation(latitude, longitude);\n        }, error => {\n          console.error('Error getting location:', error);\n        });\n      }\n    };\n    const intervalId = setInterval(checkLocation, 30000); // Check location every 30 seconds\n\n    return () => clearInterval(intervalId); // Cleanup on component unmount\n  }, [user]);\n  return null;\n};\n_s(LocationUpdater, \"rIhoQwOE5Ym721e6u8nQ9ae4Npw=\", false, function () {\n  return [useUser];\n});\n_c = LocationUpdater;\nexport default LocationUpdater;\nvar _c;\n$RefreshReg$(_c, \"LocationUpdater\");","map":{"version":3,"names":["useEffect","useUser","LocationUpdater","_s","user","userId","localStorage","getItem","console","error","updateLocation","latitude","longitude","response","fetch","method","headers","body","JSON","stringify","ok","log","checkLocation","navigator","geolocation","getCurrentPosition","position","coords","intervalId","setInterval","clearInterval","_c","$RefreshReg$"],"sources":["/Users/prakshayjoshi/Documents/Projects/Chat-App/Frontend/my-app/src/components/LocationUpdater.jsx"],"sourcesContent":["// src/components/LocationUpdater.jsx\nimport { useEffect } from 'react';\nimport { useUser } from '../contexts/UserContext';\n\nconst LocationUpdater = () => {\n  const { user } = useUser();\n\n  useEffect(() => {\n    const userId = localStorage.getItem('userId');\n\n    if (!userId) {\n      console.error('No user ID found in localStorage');\n      return;\n    }\n\n    const updateLocation = async (latitude, longitude) => {\n      try {\n        const response = await fetch(`http://localhost:9000/api/users/${userId}/location`, {\n          method: 'PATCH',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ latitude, longitude }),\n        });\n\n        if (response.ok) {\n          console.log('Location updated');\n        } else {\n          console.error('Failed to update location');\n        }\n      } catch (error) {\n        console.error('Error updating location:', error);\n      }\n    };\n\n    const checkLocation = () => {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(\n          (position) => {\n            const { latitude, longitude } = position.coords;\n            updateLocation(latitude, longitude);\n          },\n          (error) => {\n            console.error('Error getting location:', error);\n          }\n        );\n      }\n    };\n\n    const intervalId = setInterval(checkLocation, 30000); // Check location every 30 seconds\n\n    return () => clearInterval(intervalId); // Cleanup on component unmount\n  }, [user]);\n\n  return null;\n};\n\nexport default LocationUpdater;\n"],"mappings":";AAAA;AACA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,OAAO,QAAQ,yBAAyB;AAEjD,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM;IAAEC;EAAK,CAAC,GAAGH,OAAO,CAAC,CAAC;EAE1BD,SAAS,CAAC,MAAM;IACd,MAAMK,MAAM,GAAGC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;IAE7C,IAAI,CAACF,MAAM,EAAE;MACXG,OAAO,CAACC,KAAK,CAAC,kCAAkC,CAAC;MACjD;IACF;IAEA,MAAMC,cAAc,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,SAAS,KAAK;MACpD,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,mCAAkCT,MAAO,WAAU,EAAE;UACjFU,MAAM,EAAE,OAAO;UACfC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAER,QAAQ;YAAEC;UAAU,CAAC;QAC9C,CAAC,CAAC;QAEF,IAAIC,QAAQ,CAACO,EAAE,EAAE;UACfZ,OAAO,CAACa,GAAG,CAAC,kBAAkB,CAAC;QACjC,CAAC,MAAM;UACLb,OAAO,CAACC,KAAK,CAAC,2BAA2B,CAAC;QAC5C;MACF,CAAC,CAAC,OAAOA,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAClD;IACF,CAAC;IAED,MAAMa,aAAa,GAAGA,CAAA,KAAM;MAC1B,IAAIC,SAAS,CAACC,WAAW,EAAE;QACzBD,SAAS,CAACC,WAAW,CAACC,kBAAkB,CACrCC,QAAQ,IAAK;UACZ,MAAM;YAAEf,QAAQ;YAAEC;UAAU,CAAC,GAAGc,QAAQ,CAACC,MAAM;UAC/CjB,cAAc,CAACC,QAAQ,EAAEC,SAAS,CAAC;QACrC,CAAC,EACAH,KAAK,IAAK;UACTD,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;QACjD,CACF,CAAC;MACH;IACF,CAAC;IAED,MAAMmB,UAAU,GAAGC,WAAW,CAACP,aAAa,EAAE,KAAK,CAAC,CAAC,CAAC;;IAEtD,OAAO,MAAMQ,aAAa,CAACF,UAAU,CAAC,CAAC,CAAC;EAC1C,CAAC,EAAE,CAACxB,IAAI,CAAC,CAAC;EAEV,OAAO,IAAI;AACb,CAAC;AAACD,EAAA,CAnDID,eAAe;EAAA,QACFD,OAAO;AAAA;AAAA8B,EAAA,GADpB7B,eAAe;AAqDrB,eAAeA,eAAe;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}