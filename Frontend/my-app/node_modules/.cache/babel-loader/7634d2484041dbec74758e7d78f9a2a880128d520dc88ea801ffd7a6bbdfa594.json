{"ast":null,"code":"var _jsxFileName = \"/Users/prakshayjoshi/Documents/Projects/Chat-App/Frontend/my-app/src/components/SearchPlaceComponent.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport '../styles/SearchPlaceComponent.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SearchPlaceComponent = ({\n  setDestination\n}) => {\n  _s();\n  const [autocomplete, setAutocomplete] = useState(null);\n  const inputRef = useRef(null);\n  const mapRef = useRef(null);\n  const markerRef = useRef(null);\n  const polygonRef = useRef(null);\n  useEffect(() => {\n    const loadGoogleMapsScript = () => {\n      if (!window.google) {\n        const script = document.createElement('script');\n        script.src = `https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places`;\n        script.async = true;\n        script.defer = true;\n        script.onerror = () => {\n          console.error('Google Maps JavaScript API failed to load.');\n        };\n        document.head.appendChild(script);\n        script.onload = initialize;\n      } else {\n        initialize();\n      }\n    };\n    const initialize = () => {\n      initializeAutocomplete();\n      initializeMap();\n    };\n    const initializeAutocomplete = () => {\n      const input = inputRef.current;\n      const autocomplete = new window.google.maps.places.Autocomplete(input);\n      autocomplete.setFields(['geometry', 'address_components']);\n      autocomplete.addListener('place_changed', () => onPlaceChanged(autocomplete));\n      setAutocomplete(autocomplete);\n    };\n    const initializeMap = () => {\n      const defaultLocation = {\n        lat: 20.5937,\n        lng: 78.9629\n      }; // Coordinates for India\n      const map = new window.google.maps.Map(mapRef.current, {\n        center: defaultLocation,\n        zoom: 5\n      });\n      mapRef.current = map;\n    };\n    loadGoogleMapsScript();\n  }, []);\n  const onPlaceChanged = autocomplete => {\n    const place = autocomplete.getPlace();\n    if (!place.geometry) {\n      console.error('Place contains no geometry');\n      return;\n    }\n    const location = place.geometry.location;\n    setDestination({\n      latitude: location.lat(),\n      longitude: location.lng(),\n      viewport: {\n        north: place.geometry.viewport.getNorthEast().lat(),\n        east: place.geometry.viewport.getNorthEast().lng(),\n        south: place.geometry.viewport.getSouthWest().lat(),\n        west: place.geometry.viewport.getSouthWest().lng()\n      }\n    });\n    const map = new window.google.maps.Map(mapRef.current, {\n      center: location,\n      zoom: 15\n    });\n    if (markerRef.current) {\n      markerRef.current.setMap(null);\n    }\n    const marker = new window.google.maps.Marker({\n      position: location,\n      map: map\n    });\n    markerRef.current = marker;\n    if (polygonRef.current) {\n      polygonRef.current.setMap(null);\n    }\n    const bounds = new window.google.maps.LatLngBounds(place.geometry.viewport.getSouthWest(), place.geometry.viewport.getNorthEast());\n    const polygonCoords = [{\n      lat: bounds.getNorthEast().lat(),\n      lng: bounds.getNorthEast().lng()\n    }, {\n      lat: bounds.getNorthEast().lat(),\n      lng: bounds.getSouthWest().lng()\n    }, {\n      lat: bounds.getSouthWest().lat(),\n      lng: bounds.getSouthWest().lng()\n    }, {\n      lat: bounds.getSouthWest().lat(),\n      lng: bounds.getNorthEast().lng()\n    }];\n    const polygon = new window.google.maps.Polygon({\n      paths: polygonCoords,\n      strokeColor: '#FF0000',\n      strokeOpacity: 0.8,\n      strokeWeight: 2,\n      fillColor: '#FF0000',\n      fillOpacity: 0.35\n    });\n    polygon.setMap(map);\n    polygonRef.current = polygon;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search-place-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      ref: inputRef,\n      className: \"search-place-input\",\n      placeholder: \"Search for a place\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\",\n      ref: mapRef,\n      className: \"map-container\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n};\n_s(SearchPlaceComponent, \"yPgPs9/73z2s0wZHWl9qaH68SyQ=\");\n_c = SearchPlaceComponent;\nexport default SearchPlaceComponent;\nvar _c;\n$RefreshReg$(_c, \"SearchPlaceComponent\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","SearchPlaceComponent","setDestination","_s","autocomplete","setAutocomplete","inputRef","mapRef","markerRef","polygonRef","loadGoogleMapsScript","window","google","script","document","createElement","src","async","defer","onerror","console","error","head","appendChild","onload","initialize","initializeAutocomplete","initializeMap","input","current","maps","places","Autocomplete","setFields","addListener","onPlaceChanged","defaultLocation","lat","lng","map","Map","center","zoom","place","getPlace","geometry","location","latitude","longitude","viewport","north","getNorthEast","east","south","getSouthWest","west","setMap","marker","Marker","position","bounds","LatLngBounds","polygonCoords","polygon","Polygon","paths","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","className","children","type","ref","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","id","_c","$RefreshReg$"],"sources":["/Users/prakshayjoshi/Documents/Projects/Chat-App/Frontend/my-app/src/components/SearchPlaceComponent.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport '../styles/SearchPlaceComponent.css';\n\nconst SearchPlaceComponent = ({ setDestination }) => {\n  const [autocomplete, setAutocomplete] = useState(null);\n  const inputRef = useRef(null);\n  const mapRef = useRef(null);\n  const markerRef = useRef(null);\n  const polygonRef = useRef(null);\n\n  useEffect(() => {\n    const loadGoogleMapsScript = () => {\n      if (!window.google) {\n        const script = document.createElement('script');\n        script.src = `https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places`;\n        script.async = true;\n        script.defer = true;\n        script.onerror = () => {\n          console.error('Google Maps JavaScript API failed to load.');\n        };\n        document.head.appendChild(script);\n        script.onload = initialize;\n      } else {\n        initialize();\n      }\n    };\n\n    const initialize = () => {\n      initializeAutocomplete();\n      initializeMap();\n    };\n\n    const initializeAutocomplete = () => {\n      const input = inputRef.current;\n      const autocomplete = new window.google.maps.places.Autocomplete(input);\n      autocomplete.setFields(['geometry', 'address_components']);\n      autocomplete.addListener('place_changed', () => onPlaceChanged(autocomplete));\n      setAutocomplete(autocomplete);\n    };\n\n    const initializeMap = () => {\n      const defaultLocation = { lat: 20.5937, lng: 78.9629 }; // Coordinates for India\n      const map = new window.google.maps.Map(mapRef.current, {\n        center: defaultLocation,\n        zoom: 5,\n      });\n      mapRef.current = map;\n    };\n\n    loadGoogleMapsScript();\n  }, []);\n\n  const onPlaceChanged = (autocomplete) => {\n    const place = autocomplete.getPlace();\n\n    if (!place.geometry) {\n      console.error('Place contains no geometry');\n      return;\n    }\n\n    const location = place.geometry.location;\n    setDestination({\n      latitude: location.lat(),\n      longitude: location.lng(),\n      viewport: {\n        north: place.geometry.viewport.getNorthEast().lat(),\n        east: place.geometry.viewport.getNorthEast().lng(),\n        south: place.geometry.viewport.getSouthWest().lat(),\n        west: place.geometry.viewport.getSouthWest().lng(),\n      },\n    });\n\n    const map = new window.google.maps.Map(mapRef.current, {\n      center: location,\n      zoom: 15,\n    });\n\n    if (markerRef.current) {\n      markerRef.current.setMap(null);\n    }\n\n    const marker = new window.google.maps.Marker({\n      position: location,\n      map: map,\n    });\n    markerRef.current = marker;\n\n    if (polygonRef.current) {\n      polygonRef.current.setMap(null);\n    }\n\n    const bounds = new window.google.maps.LatLngBounds(\n      place.geometry.viewport.getSouthWest(),\n      place.geometry.viewport.getNorthEast()\n    );\n\n    const polygonCoords = [\n      { lat: bounds.getNorthEast().lat(), lng: bounds.getNorthEast().lng() },\n      { lat: bounds.getNorthEast().lat(), lng: bounds.getSouthWest().lng() },\n      { lat: bounds.getSouthWest().lat(), lng: bounds.getSouthWest().lng() },\n      { lat: bounds.getSouthWest().lat(), lng: bounds.getNorthEast().lng() },\n    ];\n\n    const polygon = new window.google.maps.Polygon({\n      paths: polygonCoords,\n      strokeColor: '#FF0000',\n      strokeOpacity: 0.8,\n      strokeWeight: 2,\n      fillColor: '#FF0000',\n      fillOpacity: 0.35,\n    });\n\n    polygon.setMap(map);\n    polygonRef.current = polygon;\n  };\n\n  return (\n    <div className=\"search-place-container\">\n      <input\n        type=\"text\"\n        ref={inputRef}\n        className=\"search-place-input\"\n        placeholder=\"Search for a place\"\n      />\n      <div id=\"map\" ref={mapRef} className=\"map-container\"></div>\n    </div>\n  );\n};\n\nexport default SearchPlaceComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}