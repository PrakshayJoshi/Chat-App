{"ast":null,"code":"var _jsxFileName = \"/Users/prakshayjoshi/Documents/Projects/Chat-App/Frontend/my-app/src/components/SearchPlaceComponent.jsx\",\n  _s = $RefreshSig$();\n// SearchPlaceComponent.jsx\nimport React, { useState, useRef, useEffect } from 'react';\nimport '../styles/SearchPlaceComponent.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SearchPlaceComponent = ({\n  setDestination\n}) => {\n  _s();\n  const [autocomplete, setAutocomplete] = useState(null);\n  const inputRef = useRef(null);\n  const mapRef = useRef(null);\n  const markerRef = useRef(null);\n  const polygonRef = useRef(null);\n  useEffect(() => {\n    if (!window.google || !window.google.maps) {\n      console.error('Google Maps JavaScript API library must be loaded.');\n      return;\n    }\n    const initializeAutocomplete = () => {\n      const input = inputRef.current;\n      const autocomplete = new window.google.maps.places.Autocomplete(input);\n      autocomplete.setFields(['geometry']);\n      autocomplete.addListener('place_changed', () => onPlaceChanged(autocomplete));\n      setAutocomplete(autocomplete);\n    };\n    initializeAutocomplete();\n  }, []);\n  const onPlaceChanged = autocomplete => {\n    const place = autocomplete.getPlace();\n    if (!place.geometry) {\n      console.error('Place contains no geometry');\n      return;\n    }\n    const location = place.geometry.location;\n    const radius = 1000; // Example radius in meters, you can make this dynamic\n\n    setDestination({\n      latitude: location.lat(),\n      longitude: location.lng(),\n      radius: radius\n    });\n    const map = new window.google.maps.Map(mapRef.current, {\n      center: location,\n      zoom: 15\n    });\n    if (markerRef.current) {\n      markerRef.current.setMap(null);\n    }\n    const marker = new window.google.maps.Marker({\n      position: location,\n      map: map\n    });\n    markerRef.current = marker;\n    if (polygonRef.current) {\n      polygonRef.current.setMap(null);\n    }\n    const circle = new window.google.maps.Circle({\n      strokeColor: '#FF0000',\n      strokeOpacity: 0.8,\n      strokeWeight: 2,\n      fillColor: '#FF0000',\n      fillOpacity: 0.35,\n      map: map,\n      center: location,\n      radius: radius\n    });\n    polygonRef.current = circle;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search-place-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      ref: inputRef,\n      className: \"search-place-input\",\n      placeholder: \"Search for a place\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\",\n      ref: mapRef,\n      className: \"map-container\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n_s(SearchPlaceComponent, \"yPgPs9/73z2s0wZHWl9qaH68SyQ=\");\n_c = SearchPlaceComponent;\nexport default SearchPlaceComponent;\nvar _c;\n$RefreshReg$(_c, \"SearchPlaceComponent\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","SearchPlaceComponent","setDestination","_s","autocomplete","setAutocomplete","inputRef","mapRef","markerRef","polygonRef","window","google","maps","console","error","initializeAutocomplete","input","current","places","Autocomplete","setFields","addListener","onPlaceChanged","place","getPlace","geometry","location","radius","latitude","lat","longitude","lng","map","Map","center","zoom","setMap","marker","Marker","position","circle","Circle","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","className","children","type","ref","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","id","_c","$RefreshReg$"],"sources":["/Users/prakshayjoshi/Documents/Projects/Chat-App/Frontend/my-app/src/components/SearchPlaceComponent.jsx"],"sourcesContent":["// SearchPlaceComponent.jsx\nimport React, { useState, useRef, useEffect } from 'react';\nimport '../styles/SearchPlaceComponent.css';\n\nconst SearchPlaceComponent = ({ setDestination }) => {\n  const [autocomplete, setAutocomplete] = useState(null);\n  const inputRef = useRef(null);\n  const mapRef = useRef(null);\n  const markerRef = useRef(null);\n  const polygonRef = useRef(null);\n\n  useEffect(() => {\n    if (!window.google || !window.google.maps) {\n      console.error('Google Maps JavaScript API library must be loaded.');\n      return;\n    }\n\n    const initializeAutocomplete = () => {\n      const input = inputRef.current;\n      const autocomplete = new window.google.maps.places.Autocomplete(input);\n      autocomplete.setFields(['geometry']);\n      autocomplete.addListener('place_changed', () => onPlaceChanged(autocomplete));\n      setAutocomplete(autocomplete);\n    };\n\n    initializeAutocomplete();\n  }, []);\n\n  const onPlaceChanged = (autocomplete) => {\n    const place = autocomplete.getPlace();\n\n    if (!place.geometry) {\n      console.error('Place contains no geometry');\n      return;\n    }\n\n    const location = place.geometry.location;\n\n    const radius = 1000; // Example radius in meters, you can make this dynamic\n\n    setDestination({\n      latitude: location.lat(),\n      longitude: location.lng(),\n      radius: radius,\n    });\n\n    const map = new window.google.maps.Map(mapRef.current, {\n      center: location,\n      zoom: 15,\n    });\n\n    if (markerRef.current) {\n      markerRef.current.setMap(null);\n    }\n\n    const marker = new window.google.maps.Marker({\n      position: location,\n      map: map,\n    });\n    markerRef.current = marker;\n\n    if (polygonRef.current) {\n      polygonRef.current.setMap(null);\n    }\n\n    const circle = new window.google.maps.Circle({\n      strokeColor: '#FF0000',\n      strokeOpacity: 0.8,\n      strokeWeight: 2,\n      fillColor: '#FF0000',\n      fillOpacity: 0.35,\n      map: map,\n      center: location,\n      radius: radius,\n    });\n    polygonRef.current = circle;\n  };\n\n  return (\n    <div className=\"search-place-container\">\n      <input\n        type=\"text\"\n        ref={inputRef}\n        className=\"search-place-input\"\n        placeholder=\"Search for a place\"\n      />\n      <div id=\"map\" ref={mapRef} className=\"map-container\"></div>\n    </div>\n  );\n};\n\nexport default SearchPlaceComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}