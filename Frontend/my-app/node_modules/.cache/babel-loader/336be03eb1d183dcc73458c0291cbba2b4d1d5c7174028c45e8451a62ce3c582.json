{"ast":null,"code":"var _jsxFileName = \"/Users/prakshayjoshi/Documents/Projects/Chat-App/Frontend/my-app/src/components/SearchPlaceComponent.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport '../styles/SearchPlaceComponent.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SearchPlaceComponent = ({\n  setDestination\n}) => {\n  _s();\n  const [autocomplete, setAutocomplete] = useState(null);\n  const inputRef = useRef(null);\n  const mapRef = useRef(null);\n  const markerRef = useRef(null);\n  const polygonRef = useRef(null);\n  useEffect(() => {\n    if (!window.google || !window.google.maps) {\n      console.error('Google Maps JavaScript API library must be loaded.');\n      return;\n    }\n    const initializeAutocomplete = () => {\n      const input = inputRef.current;\n      const autocomplete = new window.google.maps.places.Autocomplete(input);\n      autocomplete.setFields(['geometry', 'address_components']);\n      autocomplete.addListener('place_changed', () => onPlaceChanged(autocomplete));\n      setAutocomplete(autocomplete);\n    };\n    initializeAutocomplete();\n  }, []);\n  useEffect(() => {\n    if (mapRef.current) {\n      const initializeMap = () => {\n        const defaultLocation = {\n          lat: 20.5937,\n          lng: 78.9629\n        }; // Coordinates for India\n        const map = new window.google.maps.Map(mapRef.current, {\n          center: defaultLocation,\n          zoom: 5\n        });\n        mapRef.current = map;\n        const bounds = new window.google.maps.LatLngBounds({\n          lat: 6.4627,\n          lng: 68.1097\n        },\n        // Southwest coordinates of India\n        {\n          lat: 35.5087,\n          lng: 97.3954\n        } // Northeast coordinates of India\n        );\n        const polygonCoords = [{\n          lat: bounds.getNorthEast().lat(),\n          lng: bounds.getNorthEast().lng()\n        }, {\n          lat: bounds.getNorthEast().lat(),\n          lng: bounds.getSouthWest().lng()\n        }, {\n          lat: bounds.getSouthWest().lat(),\n          lng: bounds.getSouthWest().lng()\n        }, {\n          lat: bounds.getSouthWest().lat(),\n          lng: bounds.getNorthEast().lng()\n        }];\n        const polygon = new window.google.maps.Polygon({\n          paths: polygonCoords,\n          strokeColor: '#FF0000',\n          strokeOpacity: 0.8,\n          strokeWeight: 2,\n          fillColor: '#FF0000',\n          fillOpacity: 0.35\n        });\n        polygon.setMap(map);\n        polygonRef.current = polygon;\n\n        // Adding custom markers at vertices\n        polygonCoords.forEach(coord => {\n          new window.google.maps.Marker({\n            position: coord,\n            map: map,\n            icon: 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png' // Custom icon\n          });\n        });\n\n        // Adding label\n        const label = new window.google.maps.InfoWindow({\n          content: 'India',\n          position: bounds.getCenter()\n        });\n        label.open(map);\n      };\n      initializeMap();\n    }\n  }, [mapRef.current]); // Dependency on mapRef.current\n\n  const onPlaceChanged = autocomplete => {\n    const place = autocomplete.getPlace();\n    if (!place.geometry) {\n      console.error('Place contains no geometry');\n      return;\n    }\n    const location = place.geometry.location;\n    setDestination({\n      latitude: location.lat(),\n      longitude: location.lng(),\n      viewport: {\n        north: place.geometry.viewport.getNorthEast().lat(),\n        east: place.geometry.viewport.getNorthEast().lng(),\n        south: place.geometry.viewport.getSouthWest().lat(),\n        west: place.geometry.viewport.getSouthWest().lng()\n      }\n    });\n    const map = new window.google.maps.Map(mapRef.current, {\n      center: location,\n      zoom: 15\n    });\n    if (markerRef.current) {\n      markerRef.current.setMap(null);\n    }\n    const marker = new window.google.maps.Marker({\n      position: location,\n      map: map,\n      icon: 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png' // Custom icon\n    });\n    markerRef.current = marker;\n    if (polygonRef.current) {\n      polygonRef.current.setMap(null);\n    }\n    const bounds = new window.google.maps.LatLngBounds(place.geometry.viewport.getSouthWest(), place.geometry.viewport.getNorthEast());\n    const polygonCoords = [{\n      lat: bounds.getNorthEast().lat(),\n      lng: bounds.getNorthEast().lng()\n    }, {\n      lat: bounds.getNorthEast().lat(),\n      lng: bounds.getSouthWest().lng()\n    }, {\n      lat: bounds.getSouthWest().lat(),\n      lng: bounds.getSouthWest().lng()\n    }, {\n      lat: bounds.getSouthWest().lat(),\n      lng: bounds.getNorthEast().lng()\n    }];\n    const polygon = new window.google.maps.Polygon({\n      paths: polygonCoords,\n      strokeColor: '#FF0000',\n      strokeOpacity: 0.8,\n      strokeWeight: 2,\n      fillColor: '#FF0000',\n      fillOpacity: 0.35\n    });\n    polygon.setMap(map);\n    polygonRef.current = polygon;\n\n    // Adding custom markers at vertices\n    polygonCoords.forEach(coord => {\n      new window.google.maps.Marker({\n        position: coord,\n        map: map,\n        icon: 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png' // Custom icon\n      });\n    });\n\n    // Adding label\n    const label = new window.google.maps.InfoWindow({\n      content: 'Area Name',\n      position: bounds.getCenter()\n    });\n    label.open(map);\n\n    // Adding info window on polygon click\n    polygon.addListener('click', event => {\n      const infoWindow = new window.google.maps.InfoWindow({\n        content: 'Additional information here',\n        position: event.latLng\n      });\n      infoWindow.open(map);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search-place-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      ref: inputRef,\n      className: \"search-place-input\",\n      placeholder: \"Search for a place\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\",\n      ref: mapRef,\n      className: \"map-container\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 5\n  }, this);\n};\n_s(SearchPlaceComponent, \"pHjaT6Uc3TPJZWp7oCG9hDnizto=\");\n_c = SearchPlaceComponent;\nexport default SearchPlaceComponent;\nvar _c;\n$RefreshReg$(_c, \"SearchPlaceComponent\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","SearchPlaceComponent","setDestination","_s","autocomplete","setAutocomplete","inputRef","mapRef","markerRef","polygonRef","window","google","maps","console","error","initializeAutocomplete","input","current","places","Autocomplete","setFields","addListener","onPlaceChanged","initializeMap","defaultLocation","lat","lng","map","Map","center","zoom","bounds","LatLngBounds","polygonCoords","getNorthEast","getSouthWest","polygon","Polygon","paths","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","setMap","forEach","coord","Marker","position","icon","label","InfoWindow","content","getCenter","open","place","getPlace","geometry","location","latitude","longitude","viewport","north","east","south","west","marker","event","infoWindow","latLng","className","children","type","ref","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","id","_c","$RefreshReg$"],"sources":["/Users/prakshayjoshi/Documents/Projects/Chat-App/Frontend/my-app/src/components/SearchPlaceComponent.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport '../styles/SearchPlaceComponent.css';\n\nconst SearchPlaceComponent = ({ setDestination }) => {\n  const [autocomplete, setAutocomplete] = useState(null);\n  const inputRef = useRef(null);\n  const mapRef = useRef(null);\n  const markerRef = useRef(null);\n  const polygonRef = useRef(null);\n\n  useEffect(() => {\n    if (!window.google || !window.google.maps) {\n      console.error('Google Maps JavaScript API library must be loaded.');\n      return;\n    }\n\n    const initializeAutocomplete = () => {\n      const input = inputRef.current;\n      const autocomplete = new window.google.maps.places.Autocomplete(input);\n      autocomplete.setFields(['geometry', 'address_components']);\n      autocomplete.addListener('place_changed', () => onPlaceChanged(autocomplete));\n      setAutocomplete(autocomplete);\n    };\n\n    initializeAutocomplete();\n  }, []);\n\n  useEffect(() => {\n    if (mapRef.current) {\n      const initializeMap = () => {\n        const defaultLocation = { lat: 20.5937, lng: 78.9629 }; // Coordinates for India\n        const map = new window.google.maps.Map(mapRef.current, {\n          center: defaultLocation,\n          zoom: 5,\n        });\n        mapRef.current = map;\n\n        const bounds = new window.google.maps.LatLngBounds(\n          { lat: 6.4627, lng: 68.1097 }, // Southwest coordinates of India\n          { lat: 35.5087, lng: 97.3954 }  // Northeast coordinates of India\n        );\n\n        const polygonCoords = [\n          { lat: bounds.getNorthEast().lat(), lng: bounds.getNorthEast().lng() },\n          { lat: bounds.getNorthEast().lat(), lng: bounds.getSouthWest().lng() },\n          { lat: bounds.getSouthWest().lat(), lng: bounds.getSouthWest().lng() },\n          { lat: bounds.getSouthWest().lat(), lng: bounds.getNorthEast().lng() },\n        ];\n\n        const polygon = new window.google.maps.Polygon({\n          paths: polygonCoords,\n          strokeColor: '#FF0000',\n          strokeOpacity: 0.8,\n          strokeWeight: 2,\n          fillColor: '#FF0000',\n          fillOpacity: 0.35,\n        });\n\n        polygon.setMap(map);\n        polygonRef.current = polygon;\n\n        // Adding custom markers at vertices\n        polygonCoords.forEach((coord) => {\n          new window.google.maps.Marker({\n            position: coord,\n            map: map,\n            icon: 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png', // Custom icon\n          });\n        });\n\n        // Adding label\n        const label = new window.google.maps.InfoWindow({\n          content: 'India',\n          position: bounds.getCenter(),\n        });\n        label.open(map);\n      };\n\n      initializeMap();\n    }\n  }, [mapRef.current]); // Dependency on mapRef.current\n\n  const onPlaceChanged = (autocomplete) => {\n    const place = autocomplete.getPlace();\n\n    if (!place.geometry) {\n      console.error('Place contains no geometry');\n      return;\n    }\n\n    const location = place.geometry.location;\n    setDestination({\n      latitude: location.lat(),\n      longitude: location.lng(),\n      viewport: {\n        north: place.geometry.viewport.getNorthEast().lat(),\n        east: place.geometry.viewport.getNorthEast().lng(),\n        south: place.geometry.viewport.getSouthWest().lat(),\n        west: place.geometry.viewport.getSouthWest().lng(),\n      },\n    });\n\n    const map = new window.google.maps.Map(mapRef.current, {\n      center: location,\n      zoom: 15,\n    });\n\n    if (markerRef.current) {\n      markerRef.current.setMap(null);\n    }\n\n    const marker = new window.google.maps.Marker({\n      position: location,\n      map: map,\n      icon: 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png', // Custom icon\n    });\n    markerRef.current = marker;\n\n    if (polygonRef.current) {\n      polygonRef.current.setMap(null);\n    }\n\n    const bounds = new window.google.maps.LatLngBounds(\n      place.geometry.viewport.getSouthWest(),\n      place.geometry.viewport.getNorthEast()\n    );\n\n    const polygonCoords = [\n      { lat: bounds.getNorthEast().lat(), lng: bounds.getNorthEast().lng() },\n      { lat: bounds.getNorthEast().lat(), lng: bounds.getSouthWest().lng() },\n      { lat: bounds.getSouthWest().lat(), lng: bounds.getSouthWest().lng() },\n      { lat: bounds.getSouthWest().lat(), lng: bounds.getNorthEast().lng() },\n    ];\n\n    const polygon = new window.google.maps.Polygon({\n      paths: polygonCoords,\n      strokeColor: '#FF0000',\n      strokeOpacity: 0.8,\n      strokeWeight: 2,\n      fillColor: '#FF0000',\n      fillOpacity: 0.35,\n    });\n\n    polygon.setMap(map);\n    polygonRef.current = polygon;\n\n    // Adding custom markers at vertices\n    polygonCoords.forEach((coord) => {\n      new window.google.maps.Marker({\n        position: coord,\n        map: map,\n        icon: 'http://maps.google.com/mapfiles/ms/icons/blue-dot.png', // Custom icon\n      });\n    });\n\n    // Adding label\n    const label = new window.google.maps.InfoWindow({\n      content: 'Area Name',\n      position: bounds.getCenter(),\n    });\n    label.open(map);\n\n    // Adding info window on polygon click\n    polygon.addListener('click', (event) => {\n      const infoWindow = new window.google.maps.InfoWindow({\n        content: 'Additional information here',\n        position: event.latLng,\n      });\n      infoWindow.open(map);\n    });\n  };\n\n  return (\n    <div className=\"search-place-container\">\n      <input\n        type=\"text\"\n        ref={inputRef}\n        className=\"search-place-input\"\n        placeholder=\"Search for a place\"\n      />\n      <div id=\"map\" ref={mapRef} className=\"map-container\"></div>\n    </div>\n  );\n};\n\nexport default SearchPlaceComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}