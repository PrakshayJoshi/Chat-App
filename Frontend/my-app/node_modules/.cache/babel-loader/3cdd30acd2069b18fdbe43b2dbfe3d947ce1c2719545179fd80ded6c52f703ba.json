{"ast":null,"code":"var _jsxFileName = \"/Users/prakshayjoshi/Documents/Projects/Chat-App/Frontend/my-app/src/components/SearchPlaceComponent.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport '../styles/SearchPlaceComponent.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SearchPlaceComponent = ({\n  setDestination\n}) => {\n  _s();\n  const [autocomplete, setAutocomplete] = useState(null);\n  const inputRef = useRef(null);\n  const mapRef = useRef(null);\n  const markerRef = useRef(null);\n  const polygonRef = useRef(null);\n  useEffect(() => {\n    if (!window.google || !window.google.maps) {\n      console.error('Google Maps JavaScript API library must be loaded.');\n      return;\n    }\n    const initializeAutocomplete = () => {\n      const input = inputRef.current;\n      const autocomplete = new window.google.maps.places.Autocomplete(input);\n      autocomplete.setFields(['geometry', 'address_components']);\n      autocomplete.addListener('place_changed', () => onPlaceChanged(autocomplete));\n      setAutocomplete(autocomplete);\n    };\n    initializeAutocomplete();\n  }, []);\n  const onPlaceChanged = async autocomplete => {\n    const place = autocomplete.getPlace();\n    if (!place.geometry) {\n      console.error('Place contains no geometry');\n      return;\n    }\n    const location = place.geometry.location;\n    const placeId = place.place_id;\n    try {\n      const placeDetailsResponse = await fetch(`https://maps.googleapis.com/maps/api/place/details/json?place_id=${placeId}&key=YOUR_API_KEY`);\n      const placeDetails = await placeDetailsResponse.json();\n      const radius = placeDetails.result.geometry.viewport ? placeDetails.result.geometry.viewport.northeast : 1000; // Default to 1000 if not available\n\n      setDestination({\n        latitude: location.lat(),\n        longitude: location.lng(),\n        radius: radius,\n        viewport: {\n          north: place.geometry.viewport.getNorthEast().lat(),\n          east: place.geometry.viewport.getNorthEast().lng(),\n          south: place.geometry.viewport.getSouthWest().lat(),\n          west: place.geometry.viewport.getSouthWest().lng()\n        }\n      });\n      const map = new window.google.maps.Map(mapRef.current, {\n        center: location,\n        zoom: 15\n      });\n      if (markerRef.current) {\n        markerRef.current.setMap(null);\n      }\n      const marker = new window.google.maps.Marker({\n        position: location,\n        map: map\n      });\n      markerRef.current = marker;\n      if (polygonRef.current) {\n        polygonRef.current.setMap(null);\n      }\n      if (place.geometry.viewport) {\n        const bounds = new window.google.maps.LatLngBounds(place.geometry.viewport.getSouthWest(), place.geometry.viewport.getNorthEast());\n        const polygonCoords = [{\n          lat: bounds.getNorthEast().lat(),\n          lng: bounds.getNorthEast().lng()\n        }, {\n          lat: bounds.getNorthEast().lat(),\n          lng: bounds.getSouthWest().lng()\n        }, {\n          lat: bounds.getSouthWest().lat(),\n          lng: bounds.getSouthWest().lng()\n        }, {\n          lat: bounds.getSouthWest().lat(),\n          lng: bounds.getNorthEast().lng()\n        }];\n        const polygon = new window.google.maps.Polygon({\n          paths: polygonCoords,\n          strokeColor: '#FF0000',\n          strokeOpacity: 0.8,\n          strokeWeight: 2,\n          fillColor: '#FF0000',\n          fillOpacity: 0.35\n        });\n        polygon.setMap(map);\n        polygonRef.current = polygon;\n      } else if (place.geometry.location) {\n        const circle = new window.google.maps.Circle({\n          center: location,\n          radius: place.geometry.location.accuracy,\n          strokeColor: '#FF0000',\n          strokeOpacity: 0.8,\n          strokeWeight: 2,\n          fillColor: '#FF0000',\n          fillOpacity: 0.35\n        });\n        circle.setMap(map);\n        polygonRef.current = circle;\n      }\n    } catch (error) {\n      console.error('Error fetching place details:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search-place-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      ref: inputRef,\n      className: \"search-place-input\",\n      placeholder: \"Search for a place\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\",\n      ref: mapRef,\n      className: \"map-container\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n};\n_s(SearchPlaceComponent, \"yPgPs9/73z2s0wZHWl9qaH68SyQ=\");\n_c = SearchPlaceComponent;\nexport default SearchPlaceComponent;\nvar _c;\n$RefreshReg$(_c, \"SearchPlaceComponent\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","SearchPlaceComponent","setDestination","_s","autocomplete","setAutocomplete","inputRef","mapRef","markerRef","polygonRef","window","google","maps","console","error","initializeAutocomplete","input","current","places","Autocomplete","setFields","addListener","onPlaceChanged","place","getPlace","geometry","location","placeId","place_id","placeDetailsResponse","fetch","placeDetails","json","radius","result","viewport","northeast","latitude","lat","longitude","lng","north","getNorthEast","east","south","getSouthWest","west","map","Map","center","zoom","setMap","marker","Marker","position","bounds","LatLngBounds","polygonCoords","polygon","Polygon","paths","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","circle","Circle","accuracy","className","children","type","ref","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","id","_c","$RefreshReg$"],"sources":["/Users/prakshayjoshi/Documents/Projects/Chat-App/Frontend/my-app/src/components/SearchPlaceComponent.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport '../styles/SearchPlaceComponent.css';\n\nconst SearchPlaceComponent = ({ setDestination }) => {\n  const [autocomplete, setAutocomplete] = useState(null);\n  const inputRef = useRef(null);\n  const mapRef = useRef(null);\n  const markerRef = useRef(null);\n  const polygonRef = useRef(null);\n\n  useEffect(() => {\n    if (!window.google || !window.google.maps) {\n      console.error('Google Maps JavaScript API library must be loaded.');\n      return;\n    }\n\n    const initializeAutocomplete = () => {\n      const input = inputRef.current;\n      const autocomplete = new window.google.maps.places.Autocomplete(input);\n      autocomplete.setFields(['geometry', 'address_components']);\n      autocomplete.addListener('place_changed', () => onPlaceChanged(autocomplete));\n      setAutocomplete(autocomplete);\n    };\n\n    initializeAutocomplete();\n  }, []);\n\n  const onPlaceChanged = async (autocomplete) => {\n    const place = autocomplete.getPlace();\n\n    if (!place.geometry) {\n      console.error('Place contains no geometry');\n      return;\n    }\n\n    const location = place.geometry.location;\n    const placeId = place.place_id;\n\n    try {\n      const placeDetailsResponse = await fetch(`https://maps.googleapis.com/maps/api/place/details/json?place_id=${placeId}&key=YOUR_API_KEY`);\n      const placeDetails = await placeDetailsResponse.json();\n      const radius = placeDetails.result.geometry.viewport ? placeDetails.result.geometry.viewport.northeast : 1000; // Default to 1000 if not available\n\n      setDestination({\n        latitude: location.lat(),\n        longitude: location.lng(),\n        radius: radius,\n        viewport: {\n          north: place.geometry.viewport.getNorthEast().lat(),\n          east: place.geometry.viewport.getNorthEast().lng(),\n          south: place.geometry.viewport.getSouthWest().lat(),\n          west: place.geometry.viewport.getSouthWest().lng(),\n        },\n      });\n\n      const map = new window.google.maps.Map(mapRef.current, {\n        center: location,\n        zoom: 15,\n      });\n\n      if (markerRef.current) {\n        markerRef.current.setMap(null);\n      }\n\n      const marker = new window.google.maps.Marker({\n        position: location,\n        map: map,\n      });\n      markerRef.current = marker;\n\n      if (polygonRef.current) {\n        polygonRef.current.setMap(null);\n      }\n\n      if (place.geometry.viewport) {\n        const bounds = new window.google.maps.LatLngBounds(\n          place.geometry.viewport.getSouthWest(),\n          place.geometry.viewport.getNorthEast()\n        );\n\n        const polygonCoords = [\n          { lat: bounds.getNorthEast().lat(), lng: bounds.getNorthEast().lng() },\n          { lat: bounds.getNorthEast().lat(), lng: bounds.getSouthWest().lng() },\n          { lat: bounds.getSouthWest().lat(), lng: bounds.getSouthWest().lng() },\n          { lat: bounds.getSouthWest().lat(), lng: bounds.getNorthEast().lng() },\n        ];\n\n        const polygon = new window.google.maps.Polygon({\n          paths: polygonCoords,\n          strokeColor: '#FF0000',\n          strokeOpacity: 0.8,\n          strokeWeight: 2,\n          fillColor: '#FF0000',\n          fillOpacity: 0.35,\n        });\n\n        polygon.setMap(map);\n        polygonRef.current = polygon;\n      } else if (place.geometry.location) {\n        const circle = new window.google.maps.Circle({\n          center: location,\n          radius: place.geometry.location.accuracy,\n          strokeColor: '#FF0000',\n          strokeOpacity: 0.8,\n          strokeWeight: 2,\n          fillColor: '#FF0000',\n          fillOpacity: 0.35,\n        });\n\n        circle.setMap(map);\n        polygonRef.current = circle;\n      }\n    } catch (error) {\n      console.error('Error fetching place details:', error);\n    }\n  };\n\n  return (\n    <div className=\"search-place-container\">\n      <input\n        type=\"text\"\n        ref={inputRef}\n        className=\"search-place-input\"\n        placeholder=\"Search for a place\"\n      />\n      <div id=\"map\" ref={mapRef} className=\"map-container\"></div>\n    </div>\n  );\n};\n\nexport default SearchPlaceComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}