{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nconst LocationUpdater = ({\n  userId\n}) => {\n  _s();\n  const [prevLocation, setPrevLocation] = useState(null);\n  useEffect(() => {\n    const updateLocation = async (latitude, longitude) => {\n      try {\n        const response = await fetch(`http://localhost:9000/api/users/${userId}/location`, {\n          method: 'PATCH',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            latitude,\n            longitude\n          })\n        });\n        if (response.ok) {\n          console.log('Updated Location');\n        } else {\n          console.error('Failed to update location');\n        }\n      } catch (error) {\n        console.error('Error updating location:', error);\n      }\n    };\n    const checkLocation = async () => {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(async position => {\n          const {\n            latitude,\n            longitude\n          } = position.coords;\n          const newLocation = {\n            latitude,\n            longitude\n          };\n          if (!prevLocation || prevLocation.latitude !== latitude || prevLocation.longitude !== longitude) {\n            await updateLocation(latitude, longitude);\n            setPrevLocation(newLocation);\n          }\n        }, error => {\n          console.error('Error getting location:', error);\n        });\n      }\n    };\n    const intervalId = setInterval(checkLocation, 60000); // Check location every minute\n\n    return () => clearInterval(intervalId); // Cleanup on component unmount\n  }, [userId, prevLocation]);\n  return null; // No UI component needed\n};\n_s(LocationUpdater, \"xBQKYEqJy7AquKtQ059Av+Vrfqg=\");\n_c = LocationUpdater;\nexport default LocationUpdater;\nvar _c;\n$RefreshReg$(_c, \"LocationUpdater\");","map":{"version":3,"names":["useEffect","useState","LocationUpdater","userId","_s","prevLocation","setPrevLocation","updateLocation","latitude","longitude","response","fetch","method","headers","body","JSON","stringify","ok","console","log","error","checkLocation","navigator","geolocation","getCurrentPosition","position","coords","newLocation","intervalId","setInterval","clearInterval","_c","$RefreshReg$"],"sources":["/Users/prakshayjoshi/Documents/Projects/Chat-App/Frontend/my-app/src/components/LocationUpdater.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nconst LocationUpdater = ({ userId }) => {\n  const [prevLocation, setPrevLocation] = useState(null);\n\n  useEffect(() => {\n    const updateLocation = async (latitude, longitude) => {\n      try {\n        const response = await fetch(`http://localhost:9000/api/users/${userId}/location`, {\n          method: 'PATCH',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ latitude, longitude }),\n        });\n\n        if (response.ok) {\n          console.log('Updated Location');\n        } else {\n          console.error('Failed to update location');\n        }\n      } catch (error) {\n        console.error('Error updating location:', error);\n      }\n    };\n\n    const checkLocation = async () => {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(async (position) => {\n          const { latitude, longitude } = position.coords;\n          const newLocation = { latitude, longitude };\n\n          if (!prevLocation || (prevLocation.latitude !== latitude || prevLocation.longitude !== longitude)) {\n            await updateLocation(latitude, longitude);\n            setPrevLocation(newLocation);\n          }\n        }, (error) => {\n          console.error('Error getting location:', error);\n        });\n      }\n    };\n\n    const intervalId = setInterval(checkLocation, 60000); // Check location every minute\n\n    return () => clearInterval(intervalId); // Cleanup on component unmount\n  }, [userId, prevLocation]);\n\n  return null; // No UI component needed\n};\n\nexport default LocationUpdater;\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,MAAMC,eAAe,GAAGA,CAAC;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EACtC,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGL,QAAQ,CAAC,IAAI,CAAC;EAEtDD,SAAS,CAAC,MAAM;IACd,MAAMO,cAAc,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,SAAS,KAAK;MACpD,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,mCAAkCR,MAAO,WAAU,EAAE;UACjFS,MAAM,EAAE,OAAO;UACfC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAER,QAAQ;YAAEC;UAAU,CAAC;QAC9C,CAAC,CAAC;QAEF,IAAIC,QAAQ,CAACO,EAAE,EAAE;UACfC,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;QACjC,CAAC,MAAM;UACLD,OAAO,CAACE,KAAK,CAAC,2BAA2B,CAAC;QAC5C;MACF,CAAC,CAAC,OAAOA,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAClD;IACF,CAAC;IAED,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAIC,SAAS,CAACC,WAAW,EAAE;QACzBD,SAAS,CAACC,WAAW,CAACC,kBAAkB,CAAC,MAAOC,QAAQ,IAAK;UAC3D,MAAM;YAAEjB,QAAQ;YAAEC;UAAU,CAAC,GAAGgB,QAAQ,CAACC,MAAM;UAC/C,MAAMC,WAAW,GAAG;YAAEnB,QAAQ;YAAEC;UAAU,CAAC;UAE3C,IAAI,CAACJ,YAAY,IAAKA,YAAY,CAACG,QAAQ,KAAKA,QAAQ,IAAIH,YAAY,CAACI,SAAS,KAAKA,SAAU,EAAE;YACjG,MAAMF,cAAc,CAACC,QAAQ,EAAEC,SAAS,CAAC;YACzCH,eAAe,CAACqB,WAAW,CAAC;UAC9B;QACF,CAAC,EAAGP,KAAK,IAAK;UACZF,OAAO,CAACE,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;QACjD,CAAC,CAAC;MACJ;IACF,CAAC;IAED,MAAMQ,UAAU,GAAGC,WAAW,CAACR,aAAa,EAAE,KAAK,CAAC,CAAC,CAAC;;IAEtD,OAAO,MAAMS,aAAa,CAACF,UAAU,CAAC,CAAC,CAAC;EAC1C,CAAC,EAAE,CAACzB,MAAM,EAAEE,YAAY,CAAC,CAAC;EAE1B,OAAO,IAAI,CAAC,CAAC;AACf,CAAC;AAACD,EAAA,CA9CIF,eAAe;AAAA6B,EAAA,GAAf7B,eAAe;AAgDrB,eAAeA,eAAe;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}