{"ast":null,"code":"var _s = $RefreshSig$();\n// src/components/LocationUpdater.jsx\nimport { useEffect, useContext } from 'react';\nimport { UserContext } from '../contexts/UserContext';\nconst LocationUpdater = () => {\n  _s();\n  const {\n    user\n  } = useContext(UserContext);\n  useEffect(() => {\n    if (!user) {\n      console.error('No user found in context');\n      return;\n    }\n    const updateLocation = async (latitude, longitude) => {\n      try {\n        const response = await fetch(`http://localhost:9000/api/users/${user._id}/location`, {\n          method: 'PATCH',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            latitude,\n            longitude\n          })\n        });\n        if (response.ok) {\n          console.log('Location updated');\n        } else {\n          console.error('Failed to update location');\n        }\n      } catch (error) {\n        console.error('Error updating location:', error);\n      }\n    };\n    const checkLocation = () => {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(position => {\n          const {\n            latitude,\n            longitude\n          } = position.coords;\n          updateLocation(latitude, longitude);\n        }, error => {\n          console.error('Error getting location:', error);\n        });\n      }\n    };\n    const intervalId = setInterval(checkLocation, 30000); // Check location every 30 seconds\n\n    return () => clearInterval(intervalId); // Cleanup on component unmount\n  }, [user]);\n  return null;\n};\n_s(LocationUpdater, \"0ttrc2NAmbTIqftZMPF4nLu0yHA=\");\n_c = LocationUpdater;\nexport default LocationUpdater;\nvar _c;\n$RefreshReg$(_c, \"LocationUpdater\");","map":{"version":3,"names":["useEffect","useContext","UserContext","LocationUpdater","_s","user","console","error","updateLocation","latitude","longitude","response","fetch","_id","method","headers","body","JSON","stringify","ok","log","checkLocation","navigator","geolocation","getCurrentPosition","position","coords","intervalId","setInterval","clearInterval","_c","$RefreshReg$"],"sources":["/Users/prakshayjoshi/Documents/Projects/Chat-App/Frontend/my-app/src/components/LocationUpdater.jsx"],"sourcesContent":["// src/components/LocationUpdater.jsx\nimport { useEffect, useContext } from 'react';\nimport { UserContext } from '../contexts/UserContext';\n\nconst LocationUpdater = () => {\n  const { user } = useContext(UserContext);\n\n  useEffect(() => {\n    if (!user) {\n      console.error('No user found in context');\n      return;\n    }\n\n    const updateLocation = async (latitude, longitude) => {\n      try {\n        const response = await fetch(`http://localhost:9000/api/users/${user._id}/location`, {\n          method: 'PATCH',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ latitude, longitude }),\n        });\n\n        if (response.ok) {\n          console.log('Location updated');\n        } else {\n          console.error('Failed to update location');\n        }\n      } catch (error) {\n        console.error('Error updating location:', error);\n      }\n    };\n\n    const checkLocation = () => {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition((position) => {\n          const { latitude, longitude } = position.coords;\n          updateLocation(latitude, longitude);\n        }, (error) => {\n          console.error('Error getting location:', error);\n        });\n      }\n    };\n\n    const intervalId = setInterval(checkLocation, 30000); // Check location every 30 seconds\n\n    return () => clearInterval(intervalId); // Cleanup on component unmount\n  }, [user]);\n\n  return null;\n};\n\nexport default LocationUpdater;\n"],"mappings":";AAAA;AACA,SAASA,SAAS,EAAEC,UAAU,QAAQ,OAAO;AAC7C,SAASC,WAAW,QAAQ,yBAAyB;AAErD,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM;IAAEC;EAAK,CAAC,GAAGJ,UAAU,CAACC,WAAW,CAAC;EAExCF,SAAS,CAAC,MAAM;IACd,IAAI,CAACK,IAAI,EAAE;MACTC,OAAO,CAACC,KAAK,CAAC,0BAA0B,CAAC;MACzC;IACF;IAEA,MAAMC,cAAc,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,SAAS,KAAK;MACpD,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,mCAAkCP,IAAI,CAACQ,GAAI,WAAU,EAAE;UACnFC,MAAM,EAAE,OAAO;UACfC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAET,QAAQ;YAAEC;UAAU,CAAC;QAC9C,CAAC,CAAC;QAEF,IAAIC,QAAQ,CAACQ,EAAE,EAAE;UACfb,OAAO,CAACc,GAAG,CAAC,kBAAkB,CAAC;QACjC,CAAC,MAAM;UACLd,OAAO,CAACC,KAAK,CAAC,2BAA2B,CAAC;QAC5C;MACF,CAAC,CAAC,OAAOA,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAClD;IACF,CAAC;IAED,MAAMc,aAAa,GAAGA,CAAA,KAAM;MAC1B,IAAIC,SAAS,CAACC,WAAW,EAAE;QACzBD,SAAS,CAACC,WAAW,CAACC,kBAAkB,CAAEC,QAAQ,IAAK;UACrD,MAAM;YAAEhB,QAAQ;YAAEC;UAAU,CAAC,GAAGe,QAAQ,CAACC,MAAM;UAC/ClB,cAAc,CAACC,QAAQ,EAAEC,SAAS,CAAC;QACrC,CAAC,EAAGH,KAAK,IAAK;UACZD,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;QACjD,CAAC,CAAC;MACJ;IACF,CAAC;IAED,MAAMoB,UAAU,GAAGC,WAAW,CAACP,aAAa,EAAE,KAAK,CAAC,CAAC,CAAC;;IAEtD,OAAO,MAAMQ,aAAa,CAACF,UAAU,CAAC,CAAC,CAAC;EAC1C,CAAC,EAAE,CAACtB,IAAI,CAAC,CAAC;EAEV,OAAO,IAAI;AACb,CAAC;AAACD,EAAA,CA9CID,eAAe;AAAA2B,EAAA,GAAf3B,eAAe;AAgDrB,eAAeA,eAAe;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}