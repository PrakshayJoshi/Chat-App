{"ast":null,"code":"useEffect(() => {\n  const updateLocation = async () => {\n    try {\n      const position = await new Promise((resolve, reject) => {\n        navigator.geolocation.getCurrentPosition(resolve, reject);\n      });\n      const location = {\n        type: 'Point',\n        coordinates: [position.coords.latitude, position.coords.longitude]\n      };\n      const userId = localStorage.getItem('userId'); // Assuming userId is stored in localStorage\n\n      const response = await fetch('http://localhost:9000/api/users/update-location', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userId,\n          location\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to update location');\n      }\n    } catch (error) {\n      console.error('Error updating location:', error);\n    }\n  };\n  updateLocation();\n}, []);","map":{"version":3,"names":["useEffect","updateLocation","position","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","location","type","coordinates","coords","latitude","longitude","userId","localStorage","getItem","response","fetch","method","headers","body","JSON","stringify","ok","Error","error","console"],"sources":["/Users/prakshayjoshi/Documents/Projects/Chat-App/Frontend/my-app/src/components/HomePage.jsx"],"sourcesContent":["useEffect(() => {\n    const updateLocation = async () => {\n        try {\n            const position = await new Promise((resolve, reject) => {\n                navigator.geolocation.getCurrentPosition(resolve, reject);\n            });\n            const location = {\n                type: 'Point',\n                coordinates: [position.coords.latitude, position.coords.longitude]\n            };\n            const userId = localStorage.getItem('userId'); // Assuming userId is stored in localStorage\n\n            const response = await fetch('http://localhost:9000/api/users/update-location', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ userId, location })\n            });\n\n            if (!response.ok) {\n                throw new Error('Failed to update location');\n            }\n        } catch (error) {\n            console.error('Error updating location:', error);\n        }\n    };\n\n    updateLocation();\n}, []);\n"],"mappings":"AAAAA,SAAS,CAAC,MAAM;EACZ,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAM,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;QACpDC,SAAS,CAACC,WAAW,CAACC,kBAAkB,CAACJ,OAAO,EAAEC,MAAM,CAAC;MAC7D,CAAC,CAAC;MACF,MAAMI,QAAQ,GAAG;QACbC,IAAI,EAAE,OAAO;QACbC,WAAW,EAAE,CAACT,QAAQ,CAACU,MAAM,CAACC,QAAQ,EAAEX,QAAQ,CAACU,MAAM,CAACE,SAAS;MACrE,CAAC;MACD,MAAMC,MAAM,GAAGC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;;MAE/C,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iDAAiD,EAAE;QAC5EC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAET,MAAM;UAAEN;QAAS,CAAC;MAC7C,CAAC,CAAC;MAEF,IAAI,CAACS,QAAQ,CAACO,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;MAChD;IACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IACpD;EACJ,CAAC;EAED1B,cAAc,CAAC,CAAC;AACpB,CAAC,EAAE,EAAE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}